-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Full-adder.

library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(16 downto 0);
       	output_vector: out std_logic_vector(7 downto 0));
end entity;

architecture DutWrap of DUT is
  component adder_8bit is
 port(A,B: in std_logic_vector(7 downto 0), Cin: in STD_LOGIC, SUM: out std_logic_vector(7 downto 0));
 component adder_8bit;
begin

   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: Binary_Adder
			port map (
					-- order of inputs Cin B A
					A=> input_vector(16 downto 9);
			            	B=> input_vector(8 downto 1);
					Cin=>input_vector(0);
                               	
                                        -- order of outputs S Cout
					SUM => output_vector);

end DutWrap;

